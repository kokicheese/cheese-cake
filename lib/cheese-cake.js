// Generated by CoffeeScript 1.7.1
(function() {
  var builds, exports, fs, groups, path, _;

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  builds = {};

  groups = {};

  task('all', 'compile target files', function(options) {
    var action, target, _results;
    _results = [];
    for (target in builds) {
      action = builds[target];
      _results.push(action.call(this, options));
    }
    return _results;
  });

  task('clean', 'rm target files', function() {
    var target, _results;
    _results = [];
    for (target in builds) {
      try {
        _results.push(fs.unlinkSync(target));
      } catch (_error) {
        _results.push(null);
      }
    }
    return _results;
  });

  _(global).extend({
    _: _,
    make: function(target, depend, action) {
      var descript, group, _ref, _ref1;
      group = null;
      descript = null;
      if (target.indexOf(':') > 0) {
        _ref = target.split(':'), group = _ref[0], descript = _ref[1], target = _ref[2];
        if (!target) {
          _ref1 = [target, descript], descript = _ref1[0], target = _ref1[1];
        }
      }
      if (_(depend).isString()) {
        depend = [depend];
      }
      builds[target] = function(options) {
        var auto_val, df, dfs, error, tfs, _i, _len;
        auto_val = function() {};
        _.extend(auto_val, {
          '@': target,
          '^': _.uniq(depend),
          '<': _.first(depend),
          '?': depend,
          '+': depend,
          '*': _(depend).map(function(d) {
            return path.join(path.dirname(d), path.basename(d, path.extname(d)));
          }),
          exec: function(cmd) {
            console.log(cmd);
            return require('child_process').exec(cmd);
          }
        });
        try {
          tfs = fs.statSync(target);
        } catch (_error) {
          return action(auto_val);
        }
        auto_val['?'] = [];
        for (_i = 0, _len = depend.length; _i < _len; _i++) {
          df = depend[_i];
          try {
            dfs = fs.statSync(df);
          } catch (_error) {
            error = _error;
            console.log("file not found: " + error.path);
            continue;
          }
          if (dfs.mtime < tfs.mtime) {
            continue;
          }
          auto_val['?'].push(df);
        }
        if (auto_val['?'].length) {
          return action(auto_val);
        }
      };
      if (!group) {
        return task(target, "make " + target, builds[target]);
      }
      if (_(groups).has(group)) {
        return groups[group].push(builds[target]);
      } else {
        groups[group] = [builds[target]];
        return task(group, descript, function(options) {
          var build, _i, _len, _ref2, _results;
          _ref2 = groups[group];
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            build = _ref2[_i];
            _results.push(build.call(this, options));
          }
          return _results;
        });
      }
    }
  });

  module.exports = exports = function() {};

}).call(this);
